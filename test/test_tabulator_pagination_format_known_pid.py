# coding: utf-8

"""
    Typed PID Maker - RESTful API

    The Typed PID Maker is a service for creating, updating, obtaining and validating PID record information using Kernel Information Profiles, as defined by the Research Data Alliance.

    The version of the OpenAPI document: 2.0.0
    Contact: support@datamanager.kit.edu
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from pytypid_generated_client.models.tabulator_pagination_format_known_pid import TabulatorPaginationFormatKnownPid

class TestTabulatorPaginationFormatKnownPid(unittest.TestCase):
    """TabulatorPaginationFormatKnownPid unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TabulatorPaginationFormatKnownPid:
        """Test TabulatorPaginationFormatKnownPid
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TabulatorPaginationFormatKnownPid`
        """
        model = TabulatorPaginationFormatKnownPid()
        if include_optional:
            return TabulatorPaginationFormatKnownPid(
                data = [
                    pytypid_generated_client.models.known_pid.KnownPid(
                        pid = '0', 
                        created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                last_page = 56
            )
        else:
            return TabulatorPaginationFormatKnownPid(
        )
        """

    def testTabulatorPaginationFormatKnownPid(self):
        """Test TabulatorPaginationFormatKnownPid"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
