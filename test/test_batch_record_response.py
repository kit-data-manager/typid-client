# coding: utf-8

"""
    Typed PID Maker - RESTful API

    The Typed PID Maker is a service for creating, updating, obtaining and validating PID record information using Kernel Information Profiles, as defined by the Research Data Alliance.

    The version of the OpenAPI document: 2.0.0
    Contact: support@datamanager.kit.edu
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from pytypid_generated_client.models.batch_record_response import BatchRecordResponse

class TestBatchRecordResponse(unittest.TestCase):
    """BatchRecordResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BatchRecordResponse:
        """Test BatchRecordResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BatchRecordResponse`
        """
        model = BatchRecordResponse()
        if include_optional:
            return BatchRecordResponse(
                pid_records = [
                    pytypid_generated_client.models.pid_record.PIDRecord(
                        pid = '', 
                        entries = {
                            'key' : [
                                pytypid_generated_client.models.pid_record_entry.PIDRecordEntry(
                                    key = '', 
                                    name = '', 
                                    value = '', )
                                ]
                            }, )
                    ],
                mapping = {
                    'key' : ''
                    }
            )
        else:
            return BatchRecordResponse(
        )
        """

    def testBatchRecordResponse(self):
        """Test BatchRecordResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
